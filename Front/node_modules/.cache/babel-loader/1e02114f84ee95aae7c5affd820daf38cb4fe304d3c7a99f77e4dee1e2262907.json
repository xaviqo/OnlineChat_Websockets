{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { EventBus } from '@/main';\nexport default {\n  name: 'CreateRoomCard',\n  created() {\n    this.getMaxUsers();\n    this.getAvatarStyles();\n  },\n  data: () => ({\n    validCreateRoomForm: false,\n    showCard: false,\n    maxUsersLimit: 0,\n    maxUsers: [],\n    avatarStyles: [],\n    userAvatarStyle: '',\n    roomDto: {\n      roomTopic: \"\",\n      adminNickname: \"\",\n      passwordProtected: false,\n      showInLobby: false,\n      usersLimit: 2,\n      avatarStyle: ''\n    },\n    rules: {\n      name: [v => !!v || 'Nickname is required', v => !(v && v.length > 14) || 'Nickname must be less than 14 characters', v => !(v && v.length < 4) || 'Nickname must be at least 4 characters'],\n      limit: [v => !!v || 'Limit is required', v => !(v && v < 2) || \"The minimum room size is 2 users\", v => !(v && v > this.maxUsersLimit) || \"Rooms are limited to \" + this.maxUsersLimit + \" users\"]\n    }\n  }),\n  methods: {\n    createRoom() {\n      if (this.$refs.refCreateRoom.validate()) {\n        this.axios.post(`/v1/room/create`, this.roomDto).then(res => {\n          console.log(res);\n          if (res.status === 200) {\n            EventBus.$emit('showAlert', {\n              color: \"success\",\n              type: \"success\",\n              msg: `Chat room successfully created`\n            });\n            //this.$router.push(`/lobby/${this.retrieveLobbyId()}`);\n          }\n        }).catch(e => {\n          console.log(e);\n          EventBus.$emit('showAlert', {\n            color: \"error\",\n            type: \"error\",\n            msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n          });\n        });\n      } else {\n        EventBus.$emit('showAlert', {\n          color: \"error\",\n          type: \"error\",\n          msg: `Form is not valid`\n        });\n      }\n    },\n    getMaxUsers() {\n      this.axios.get(`/v1/room/users-limit`).then(res => {\n        this.maxUsersLimit = res.data;\n        for (let i = 2; i <= this.maxUsersLimit; i++) {\n          this.maxUsers.push(i);\n        }\n      });\n    },\n    getAvatarStyles() {\n      this.axios.get(`/v1/room/avatar-styles`).then(res => {\n        console.log(res.data);\n        this.avatarStyles = res.data;\n      });\n    },\n    avatarizeNickname(nickname) {\n      return `https://avatars.dicebear.com/api/CROODLES/${nickname}.svg`;\n    },\n    newAvatarStyle(actualStyle) {\n      const totalStyles = this.avatarStyles.length;\n      const newStyle = this.avatarStyles[Math.floor(totalStyles * Math.random())];\n      if (newStyle === actualStyle) this.newAvatarStyle(actualStyle);\n      return newStyle;\n    }\n  }\n};","map":{"version":3,"mappings":";AAmHA;AACA;EACAA;EACAC;IACA;IACA;EACA;EACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;IACAC;MACAhB,OACAiB,oCACAA,0EACAA,sEACA;MACAC,QACAD,iCACAA,0DACAA;IAEA;EACA;EACAE;IACAC;MAEA;QACA,WACAC,sCACAC;UACAC;UACA;YACAC;cACAC;cACAC;cACAC;YACA;YACA;UACA;QACA,GACAC;UACAL;UACAC;YACAC;YACAC;YACAC;UACA;QACA;MACA;QACAH;UACAC;UACAC;UACAC;QACA;MACA;IAEA;IACAE;MACA,WACAC,4BACAR;QACA;QACA;UACA;QACA;MACA;IAEA;IACAS;MACA,WACAD,8BACAR;QACAC;QACA;MACA;IACA;IACAS;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;EACA;AACA","names":["name","created","data","validCreateRoomForm","showCard","maxUsersLimit","maxUsers","avatarStyles","userAvatarStyle","roomDto","roomTopic","adminNickname","passwordProtected","showInLobby","usersLimit","avatarStyle","rules","v","limit","methods","createRoom","post","then","console","EventBus","color","type","msg","catch","getMaxUsers","get","getAvatarStyles","avatarizeNickname","newAvatarStyle"],"sourceRoot":"src/components/home","sources":["CreateRoomCard.vue"],"sourcesContent":["<template>\n  <v-card\n      tile\n      dark\n      elevation=\"0\"\n      class=\"full-height\"\n  >\n    <v-img\n        height=\"55vh\"\n        src=\"https://unsplash.com/photos/9OKGEVJiTKk/download?force=true&w=640\"\n        class=\"pa-12\"\n    >\n      <v-row fluid class=\"fill-height d-flex justify-center align-center\" v-if=\"showCard\">\n        <v-col cols=\"10\">\n\n          <v-card light class=\"pa-6 transparent-title-color\" transition=\"fade-transition\">\n            <v-form\n                ref=\"refCreateRoom\"\n                v-model=\"validCreateRoomForm\"\n                lazy-validation\n            >\n              <v-row>\n                <v-col cols=\"6\">\n                  <v-card-title class=\"ml-n4\">\n                    <v-icon class=\"mr-5\">mdi-tune-variant</v-icon>\n                    Customize your chat room\n                  </v-card-title>\n                </v-col>\n                <v-col cols=\"6\" class=\"text-right\">\n                  <v-btn icon @click=\"showCard = false\"><v-icon>mdi-close</v-icon></v-btn>\n                </v-col>\n                <v-col cols=\"6\">\n                  <v-text-field\n                      v-model=\"roomDto.roomTopic\"\n                      label=\"Room name/topic (or leave empty)\"\n                      filled\n                  ></v-text-field>\n                </v-col>\n                <v-col cols=\"4\">\n                  <v-text-field\n                      v-model=\"roomDto.adminNickname\"\n                      :rules=\"rules.name\"\n                      label=\"Your nickname\"\n                      required\n                      filled\n                  ></v-text-field>\n                </v-col>\n                <v-col cols=\"2\">\n                  <v-avatar\n                    color=\"grey\"\n                    class=\"lighten-2\"\n                    size=\"50\">\n                    <v-img height=\"50\" :src=\"avatarizeNickname(roomDto.adminNickname)\" v-if=\"roomDto.adminNickname.length > 3\"></v-img>\n                    <v-icon v-if=\"roomDto.adminNickname.length <= 3\" x-large>mdi-help-circle-outline</v-icon>\n                  </v-avatar>\n                </v-col>\n                <v-col cols=\"6\">\n                  <v-select\n                      v-model=\"roomDto.usersLimit\"\n                      :items=\"this.maxUsers\"\n                      :rules=\"[v => !!v || 'Item is required']\"\n                      label=\"Users limit\"\n                      required\n                      filled\n                  ></v-select>\n                </v-col>\n                <v-col cols=\"3\">\n                  <v-checkbox\n                      v-model=\"roomDto.passwordProtected\"\n                      label=\"Password protected?\"\n                      filled\n                      class=\"mt-n1\"\n                  ></v-checkbox>\n                </v-col>\n                <v-col cols=\"3\">\n                  <v-checkbox\n                      v-model=\"roomDto.showInLobby\"\n                      label=\"Show in lobby explorer?\"\n                      filled\n                      class=\"mt-n1\"\n                  ></v-checkbox>\n                </v-col>\n              </v-row>\n\n            </v-form>\n          </v-card>\n        </v-col>\n\n        <v-row fluid class=\"d-flex justify-center align-center mt-n12\">\n            <v-btn class=\"transparent-title-color\" light x-large outlined elevation=\"8\">\n              <v-card-title class=\"full-height justify-center\" primary-title\n              @click=\"createRoom\"\n              >\n                Create chat room\n              </v-card-title>\n            </v-btn>\n        </v-row>\n\n      </v-row>\n\n      <v-row fluid class=\"fill-height\" v-if=\"!showCard\">\n        <v-col class=\"d-flex justify-center align-center\">\n          <v-btn class=\"transparent-title-color\" light x-large outlined elevation=\"8\" @click=\"showCard = true\">\n            <v-card-title primary-title>\n              Create and customize your own chat room\n            </v-card-title>\n          </v-btn>\n        </v-col>\n      </v-row>\n\n    </v-img>\n  </v-card>\n</template>\n\n<script>\nimport { EventBus } from '@/main';\nexport default {\n  name: 'CreateRoomCard',\n  created() {\n    this.getMaxUsers();\n    this.getAvatarStyles();\n  },\n  data: () => ({\n    validCreateRoomForm: false,\n    showCard: false,\n    maxUsersLimit: 0,\n    maxUsers: [],\n    avatarStyles: [],\n    userAvatarStyle: '',\n    roomDto: {\n      roomTopic: \"\",\n      adminNickname: \"\",\n      passwordProtected: false,\n      showInLobby: false,\n      usersLimit: 2,\n      avatarStyle: '',\n    },\n    rules: {\n      name: [\n        v => !!v || 'Nickname is required',\n        v => !(v && v.length > 14) || 'Nickname must be less than 14 characters',\n        v => !(v && v.length < 4) || 'Nickname must be at least 4 characters',\n      ],\n      limit: [\n        v => !!v || 'Limit is required',\n        v => !(v && v < 2) || \"The minimum room size is 2 users\",\n        v => !(v && v > this.maxUsersLimit) || \"Rooms are limited to \"+this.maxUsersLimit+\" users\",\n      ]\n    }\n  }),\n  methods: {\n    createRoom(){\n\n      if (this.$refs.refCreateRoom.validate()){\n        this.axios\n            .post(`/v1/room/create`,this.roomDto)\n            .then((res) => {\n              console.log(res)\n              if (res.status === 200) {\n                EventBus.$emit('showAlert', {\n                  color: \"success\",\n                  type: \"success\",\n                  msg: `Chat room successfully created`\n                });\n                //this.$router.push(`/lobby/${this.retrieveLobbyId()}`);\n              }\n            })\n            .catch((e) => {\n              console.log(e)\n              EventBus.$emit('showAlert', {\n                color: \"error\",\n                type: \"error\",\n                msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n              });\n            });\n      } else {\n        EventBus.$emit('showAlert', {\n          color: \"error\",\n          type: \"error\",\n          msg: `Form is not valid`\n        });\n      }\n\n    },\n    getMaxUsers(){\n      this.axios\n          .get(`/v1/room/users-limit`)\n          .then((res) => {\n            this.maxUsersLimit = res.data;\n            for (let i = 2; i <= this.maxUsersLimit; i++) {\n              this.maxUsers.push(i);\n            }\n          });\n\n    },\n    getAvatarStyles(){\n      this.axios\n          .get(`/v1/room/avatar-styles`)\n          .then((res) => {\n            console.log(res.data);\n            this.avatarStyles = res.data;\n          });\n    },\n    avatarizeNickname(nickname){\n      return `https://avatars.dicebear.com/api/CROODLES/${nickname}.svg`\n    },\n    newAvatarStyle(actualStyle){\n      const totalStyles = this.avatarStyles.length;\n      const newStyle = this.avatarStyles[Math.floor(totalStyles * Math.random())];\n      if (newStyle === actualStyle) this.newAvatarStyle(actualStyle);\n      return newStyle;\n    }\n  },\n}\n</script>\n\n<style scoped>\n.transparent-title-color {\n  background-color: rgba(255, 255, 255, .8) !important;\n  border-color: white !important;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}