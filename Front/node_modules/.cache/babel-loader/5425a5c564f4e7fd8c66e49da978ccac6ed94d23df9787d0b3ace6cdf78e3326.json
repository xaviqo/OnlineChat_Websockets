{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mixins } from \"@/mixins\";\nimport { EventBus } from \"@/main\";\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nexport default {\n  mixins: [mixins],\n  name: \"ChatMessages\",\n  data: () => ({\n    myId: '',\n    messages: [],\n    adminData: {\n      adminId: \"\",\n      adminNickname: \"\",\n      itsMe: \"\"\n    },\n    actionsToSave: []\n  }),\n  created() {\n    this.myId = this.getUserId();\n    this.getAdminIdAndName();\n    EventBus.$on('chatView_chatMessages_filterMessage', body => {\n      if (this.saveMessage(body.action)) this.messages.push(body);\n      this.filterMessage(body);\n      this.scrollChat();\n    });\n    setInterval(() => this.$forceUpdate(), 30000);\n  },\n  methods: {\n    filterMessage(body) {\n      switch (body.action) {\n        case \"JOIN\":\n          if (!this.isMyId(body.senderId)) {\n            EventBus.$emit('showAlert', {\n              color: \"green\",\n              type: \"info\",\n              msg: body.popMessage\n            });\n          }\n          break;\n        case \"LEAVE\":\n          EventBus.$emit('showAlert', {\n            color: \"green\",\n            type: \"info\",\n            msg: body.popMessage\n          });\n          break;\n        case \"SPAM\":\n          if (this.isMyId(body.senderId) || this.adminData.itsMe) {\n            EventBus.$emit('showAlert', {\n              color: \"error\",\n              type: \"error\",\n              msg: body.popMessage\n            });\n          }\n          break;\n      }\n    },\n    saveMessage(action) {\n      return this.actionsToSave.includes(action);\n    },\n    getAdminIdAndName() {\n      this.axios.get(`/v1/check/room-admin/${this.$route.params.roomId}`).then(res => {\n        this.adminData.adminId = res.data.adminId;\n        this.adminData.adminNickname = res.data.adminNickname;\n        this.adminData.itsMe = this.isMyId(res.data.adminId);\n        this.actionsToSave = this.adminData.itsMe ? [\"MESSAGE\", \"JOIN\", \"LEAVE\", \"SPAM\"] : [\"MESSAGE\", \"JOIN\", \"LEAVE\"];\n      }).catch(e => {\n        EventBus.$emit('showAlert', {\n          color: \"error\",\n          type: \"error\",\n          msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n        });\n      });\n    },\n    timeFromDate(date) {\n      return dayjs(date).fromNow();\n    },\n    scrollChat() {\n      const div = document.querySelector('.messagesContainer');\n      if (div.scrollTop < div.scrollHeight - div.clientHeight) div.scrollTop += 100; // move down\n    }\n  }\n};","map":{"version":3,"mappings":";AA8DA;AACA;AACA;AACA;AACA;EACAA;EACAC;EACAC;IACAC;IACAC;IACAC;MACAC;MACAC;MACAC;IACA;IACAC;EACA;EACAC;IACA;IACA;IAEAC;MACA;MACA;MACA;IACA;IAEAC;EACA;EACAC;IACAC;MACA;QACA;UACA;YACAH;cACAI;cACAC;cACAC;YACA;UACA;UACA;QACA;UACAN;YACAI;YACAC;YACAC;UACA;UACA;QACA;UACA;YACAN;cACAI;cACAC;cACAC;YACA;UACA;UACA;MAAA;IAEA;IACAC;MACA;IACA;IACAC;MACA,WACAC,yDACAC;QACA;QACA;QACA;QACA;MACA,GACAC;QACAX;UACAI;UACAC;UACAC;QACA;MACA;IACA;IACAM;MACA;IACA;IACAC;MACA;MACA;IACA;EACA;AACA","names":["mixins","name","data","myId","messages","adminData","adminId","adminNickname","itsMe","actionsToSave","created","EventBus","setInterval","methods","filterMessage","color","type","msg","saveMessage","getAdminIdAndName","get","then","catch","timeFromDate","scrollChat"],"sourceRoot":"src/components/chat","sources":["ChatMessages.vue"],"sourcesContent":["<template>\n  <v-card\n      tile\n      elevation=\"0\"\n      class=\"messagesContainer pa-0 ma-0\"\n      height=\"84vh\"\n  >\n    <v-list ref=\"msgListRef\">\n      <v-list-item three-line\n                   v-for=\"msg in messages\"\n                   :key=\"msg.uid\"\n      >\n        <v-list-item-content>\n          <v-card\n              max-width=\"35vw\"\n              :color=\"(myId === msg.senderId)?'blue':'grey'\"\n              dark\n              :class=\"(myId === msg.senderId)?'ml-auto':'mr-auto'\"\n          >\n            <v-list-item three-line>\n              <v-list-item-content>\n                <div class=\"mb-4\">\n                  <v-icon small class=\"mb-1 mr-2\">mdi-account</v-icon>\n                  <strong>{{ msg.senderName }}</strong>\n                </div>\n                <p>\n                  {{ msg.message }}\n                </p>\n                <v-list-item-subtitle class=\"mt-4\">\n                  <v-icon small class=\"mb-1 mr-2\">mdi-clock-outline</v-icon>\n                  {{ timeFromDate(msg.time).charAt(0).toUpperCase() + timeFromDate(msg.time).slice(1) }}\n                </v-list-item-subtitle>\n              </v-list-item-content>\n              <v-badge\n                  bordered\n                  bottom\n                  color=\"green\"\n                  dot\n                  offset-x=\"10\"\n                  offset-y=\"10\"\n                  class=\"chat-msg-badge\"\n              >\n                <v-avatar\n                    color=\"grey\"\n                    class=\"lighten-2\"\n                    size=\"50\">\n                  <v-img height=\"50\" :src=\"`https://avatars.dicebear.com/api/${msg.avatarUrl}/${msg.senderNick}.svg`\"></v-img>\n                </v-avatar>\n              </v-badge>\n            </v-list-item>\n          </v-card >\n        </v-list-item-content>\n      </v-list-item>\n    </v-list>\n  </v-card>\n</template>\n<style scoped>\n.messagesContainer{\n  overflow-y: auto !important;\n}\n</style>\n<script>\nimport { mixins } from \"@/mixins\";\nimport { EventBus } from \"@/main\";\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nexport default {\n  mixins: [mixins],\n  name: \"ChatMessages\",\n  data: () => ({\n    myId: '',\n    messages: [],\n    adminData: {\n      adminId: \"\",\n      adminNickname: \"\",\n      itsMe: \"\"\n    },\n    actionsToSave: []\n  }),\n  created() {\n    this.myId = this.getUserId();\n    this.getAdminIdAndName();\n\n    EventBus.$on('chatView_chatMessages_filterMessage', body => {\n      if (this.saveMessage(body.action)) this.messages.push(body);\n      this.filterMessage(body);\n      this.scrollChat();\n    });\n\n    setInterval( () => this.$forceUpdate(), 30000);\n  },\n  methods: {\n    filterMessage(body){\n      switch (body.action){\n        case  \"JOIN\":\n          if (!this.isMyId(body.senderId)){\n            EventBus.$emit('showAlert', {\n              color: \"green\",\n              type: \"info\",\n              msg: body.popMessage\n            });\n          }\n          break;\n        case \"LEAVE\":\n          EventBus.$emit('showAlert', {\n            color: \"green\",\n            type: \"info\",\n            msg: body.popMessage\n          });\n          break;\n        case \"SPAM\":\n          if (this.isMyId(body.senderId) || this.adminData.itsMe){\n            EventBus.$emit('showAlert', {\n              color: \"error\",\n              type: \"error\",\n              msg: body.popMessage\n            });\n          }\n          break;\n      }\n    },\n    saveMessage(action){\n      return this.actionsToSave.includes(action);\n    },\n    getAdminIdAndName(){\n      this.axios\n          .get(`/v1/check/room-admin/${this.$route.params.roomId}`)\n          .then((res) => {\n            this.adminData.adminId = res.data.adminId;\n            this.adminData.adminNickname = res.data.adminNickname;\n            this.adminData.itsMe = this.isMyId(res.data.adminId);\n            this.actionsToSave = this.adminData.itsMe?[\"MESSAGE\",\"JOIN\",\"LEAVE\",\"SPAM\"]:[\"MESSAGE\",\"JOIN\",\"LEAVE\"];\n          })\n          .catch((e) => {\n            EventBus.$emit('showAlert', {\n              color: \"error\",\n              type: \"error\",\n              msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n            });\n          });\n    },\n    timeFromDate(date){\n      return dayjs(date).fromNow();\n    },\n    scrollChat() {\n      const div = document.querySelector('.messagesContainer');\n      if (div.scrollTop < div.scrollHeight - div.clientHeight) div.scrollTop += 100; // move down\n    },\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}