{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mixins } from \"@/mixins\";\nimport { EventBus } from \"@/main\";\nexport default {\n  mixins: [mixins],\n  data: () => ({\n    notConnectedDialog: false,\n    roomCfg: {\n      hasPassword: false,\n      full: false\n    },\n    joinDto: {\n      nickname: '',\n      password: ''\n    },\n    rules: {\n      name: [v => !!v || 'Nickname is required', v => !(v && v.length > 14) || 'Nickname must be less than 14 characters', v => !(v && v.length < 4) || 'Nickname must be at least 4 characters'],\n      password: [v => !!v || 'Password is requited']\n    }\n  }),\n  created() {\n    this.existsRoom();\n    if (this.isSessionSetted() && !this.roomMatch()) {\n      EventBus.$emit('showAlert', {\n        color: \"error\",\n        type: \"error\",\n        msg: `You cannot access this chat room.`\n      });\n      this.$router.push(`/404`);\n    }\n\n    /*    if (!this.isSessionSetted()){\n          this.notConnectedDialog = true;\n        }*/\n  },\n\n  methods: {\n    roomMatch() {\n      return this.$route.params.roomId.toUpperCase() === this.getChatId().toUpperCase();\n    },\n    existsRoom() {\n      this.axios.get(`/v1/cfg/check/${this.$route.params.roomId}`).then(res => {\n        this.roomCfg = res.data;\n        console.log(res.data);\n        if (this.roomCfg.full) {\n          EventBus.$emit('showAlert', {\n            color: \"info\",\n            type: \"info\",\n            msg: `The room is full, try again later`\n          });\n        }\n      }).catch(e => {\n        EventBus.$emit('showAlert', {\n          color: \"error\",\n          type: \"error\",\n          msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n        });\n        this.$router.push(`/404`);\n      });\n    },\n    handleRoomCfg() {}\n  }\n};","map":{"version":3,"mappings":";AA+EA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;MACAC;MACAC;IACA;IACAC;MACAC;MACAC;IACA;IACAC;MACAC,OACAC,oCACAA,0EACAA,sEACA;MACAH,WACAG;IAEA;EACA;EACAC;IACA;IAEA;MACAC;QACAC;QACAC;QACAC;MACA;MACA;IACA;;IAEA;AACA;AACA;EAEA;;EACAC;IACAC;MACA;IACA;IACAC;MACA,WACAC,kDACAC;QACA;QACAC;QACA;UACAT;YACAC;YACAC;YACAC;UACA;QACA;MACA,GACAO;QACAV;UACAC;UACAC;UACAC;QACA;QACA;MACA;IACA;IACAQ,iBAEA;EACA;AACA","names":["mixins","data","notConnectedDialog","roomCfg","hasPassword","full","joinDto","nickname","password","rules","name","v","created","EventBus","color","type","msg","methods","roomMatch","existsRoom","get","then","console","catch","handleRoomCfg"],"sourceRoot":"src/views","sources":["ChatView.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row>\n      <v-col cols=\"2\">\n        <v-card height=\"90vh\" class=\"mt-4 ml-4 mr-2\" tile elevation=\"0\">\n\n        </v-card>\n      </v-col>\n      <v-divider vertical></v-divider>\n      <v-col cols=\"10\">\n        <v-card height=\"90vh\" class=\"mt-4 mr-4 ml-2\" tile elevation=\"0\">\n          \n        </v-card>\n      </v-col>\n    </v-row>\n    <!--DIALOG-->\n    <template>\n      <v-row justify=\"center\">\n        <v-dialog\n            v-model=\"notConnectedDialog\"\n            persistent\n            max-width=\"30vw\"\n        >\n          <v-card>\n            <v-card-title class=\"text-h5\" v-if=\"!roomCfg.full\">\n              <v-icon class=\"mr-3\" large>mdi-chat-question-outline</v-icon>\n              Do you want to join this chat room?\n            </v-card-title>\n            <v-card-title class=\"text-h5\" v-else>\n              <v-icon class=\"mr-3\" large>mdi-emoticon-sad-outline</v-icon>\n              We are sorry but the room is full, try again later\n            </v-card-title>\n            <v-row v-if=\"!roomCfg.full\" class=\"ma-4\">\n              <v-col>\n                <v-text-field\n                    prepend-inner-icon=\"mdi-account\"\n                    v-model=\"joinDto.nickname\"\n                    :rules=\"rules.name\"\n                    label=\"Your nickname\"\n                    required\n                    filled\n                ></v-text-field>\n              </v-col>\n              <v-col v-if=\"roomCfg.hasPassword\">\n                <v-text-field\n                    prepend-inner-icon=\"mdi-lock\"\n                    v-model=\"joinDto.password\"\n                    :rules=\"rules.password\"\n                    label=\"Room password\"\n                    required\n                    filled\n                ></v-text-field>\n              </v-col>\n            </v-row>\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn\n                  color=\"green darken-1\"\n                  text\n                  @click=\"$router.push(`/`);\"\n              >\n                Exit\n              </v-btn>\n              <v-btn\n                  color=\"green darken-1\"\n                  text\n                  @click=\"notConnectedDialog = false\"\n                  v-if=\"!roomCfg.full\"\n              >\n                Join\n              </v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n      </v-row>\n    </template>\n  </div>\n</template>\n<script>\nimport { mixins} from \"@/mixins\";\nimport { EventBus } from \"@/main\";\n\nexport default {\n  mixins: [mixins],\n  data: () => ({\n    notConnectedDialog: false,\n    roomCfg: {\n      hasPassword: false,\n      full: false\n    },\n    joinDto: {\n      nickname: '',\n      password: ''\n    },\n    rules: {\n      name: [\n        v => !!v || 'Nickname is required',\n        v => !(v && v.length > 14) || 'Nickname must be less than 14 characters',\n        v => !(v && v.length < 4) || 'Nickname must be at least 4 characters',\n      ],\n      password: [\n          v => !!v || 'Password is requited'\n      ]\n    }\n  }),\n  created() {\n    this.existsRoom();\n\n    if (this.isSessionSetted() && !this.roomMatch()) {\n      EventBus.$emit('showAlert', {\n        color: \"error\",\n        type: \"error\",\n        msg: `You cannot access this chat room.`\n      });\n      this.$router.push(`/404`);\n    }\n\n/*    if (!this.isSessionSetted()){\n      this.notConnectedDialog = true;\n    }*/\n\n  },\n  methods: {\n    roomMatch() {\n      return (this.$route.params.roomId.toUpperCase() === this.getChatId().toUpperCase());\n    },\n    existsRoom(){\n      this.axios\n          .get(`/v1/cfg/check/${this.$route.params.roomId}`)\n          .then((res) => {\n            this.roomCfg = res.data;\n            console.log(res.data);\n            if (this.roomCfg.full){\n              EventBus.$emit('showAlert', {\n                color: \"info\",\n                type: \"info\",\n                msg: `The room is full, try again later`\n              });\n            }\n          })\n          .catch((e) => {\n            EventBus.$emit('showAlert', {\n              color: \"error\",\n              type: \"error\",\n              msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n            });\n            this.$router.push(`/404`);\n          });\n    },\n    handleRoomCfg(){\n\n    }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}