{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"webstomp-client\";\nimport { mixins } from \"@/mixins\";\nimport { EventBus } from \"@/main\";\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport ChatUsers from \"@/components/chat/ChatUsers.vue\";\nimport ChatMessages from \"@/components/chat/ChatMessages.vue\";\nimport ChatConfiguration from \"@/components/chat/ChatConfiguration.vue\";\nimport ChatInput from \"@/components/chat/ChatInput.vue\";\nexport default {\n  mixins: [mixins],\n  components: {\n    ChatInput,\n    ChatConfiguration,\n    ChatUsers,\n    ChatMessages\n  },\n  data: () => ({\n    validConnection: true,\n    socket: null,\n    stompClient: null,\n    chatMessages: [],\n    chatUsers: [],\n    notConnectedDialog: false,\n    roomCfg: {\n      hasPassword: false,\n      full: false\n    },\n    joinDto: {\n      nickname: '',\n      password: ''\n    },\n    rules: {\n      name: [v => !!v || 'Nickname is required', v => !(v && v.length > 14) || 'Nickname must be less than 14 characters', v => !(v && v.length < 4) || 'Nickname must be at least 4 characters'],\n      password: [v => !!v || 'Password is requited']\n    }\n  }),\n  created() {\n    this.existsRoom();\n    if (this.isSessionSetted() && !this.roomMatch()) {\n      this.validConnection = false;\n      EventBus.$emit('showAlert', {\n        color: \"error\",\n        type: \"error\",\n        msg: `You cannot access this chat room.`\n      });\n      this.$router.push(`/404`);\n    }\n    if (!this.isSessionSetted()) {\n      this.validConnection = false;\n      this.notConnectedDialog = true;\n    }\n    //this.myId = this.getUserId(); <-- En principio no se usa, borrar si veo que no afecta a nada\n    dayjs.extend(relativeTime);\n    if (this.validConnection) this.connectsWS();\n  },\n  methods: {\n    connectsWS() {\n      this.socket = new SockJS('http://localhost:8080/websocket', null, {\n        sessionId: () => {\n          return this.getChatId() + \":\" + this.getUserId() + \":\" + this.getNickname() + \":\" + Math.floor(Math.random() * 99999);\n        }\n      });\n      this.stompClient = Stomp.over(this.socket);\n      //this.stompClient.debug = () => { };\n      this.stompClient.connect({\n        senderId: this.getUserId(),\n        token: this.token,\n        senderNickname: this.getNickname(),\n        lobby: this.getChatId()\n      }, frame => {\n        this.stompClient.subscribe(`/topic/messages/${this.getChatId()}`, tick => {\n          console.log(JSON.parse(tick.body));\n          //this.filterLobbyInteraction(JSON.parse(tick.body));\n        });\n        //EventBus.$emit('reloadPlayersInLobby');\n      }, error => {\n        EventBus.$emit('showAlert', {\n          color: \"error\",\n          type: \"error\",\n          msg: \"Error connecting to the chat socket\"\n        });\n      });\n    },\n    roomMatch() {\n      return this.$route.params.roomId.toUpperCase() === this.getChatId().toUpperCase();\n    },\n    existsRoom() {\n      this.axios.get(`/v1/cfg/check/${this.$route.params.roomId}`).then(res => {\n        this.roomCfg = res.data;\n        if (this.roomCfg.full) {\n          EventBus.$emit('showAlert', {\n            color: \"info\",\n            type: \"info\",\n            msg: `The room is full, try again later`\n          });\n        }\n      }).catch(e => {\n        EventBus.$emit('showAlert', {\n          color: \"error\",\n          type: \"error\",\n          msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n        });\n        this.$router.push(`/404`);\n      });\n    },\n    handleRoomCfg() {}\n  }\n};","map":{"version":3,"mappings":";AAyFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAA;EACAC;IACAC;IACAC;IACAC;IACAC;EAEA;EACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;MACAC;MACAC;IACA;IACAC;MACAC;MACAC;IACA;IACAC;MACAC,OACAC,oCACAA,0EACAA,sEACA;MACAH,WACAG;IAEA;EACA;EACAC;IACA;IAEA;MACA;MACAC;QACAC;QACAC;QACAC;MACA;MACA;IACA;IAEA;MACA;MACA;IACA;IACA;IACAC;IAEA;EACA;EACAC;IACAC;MACA;QACAC;UACA;QACA;MACA;MACA;MACA;MACA;QACAC;QACAC;QACAC;QACAC;MACA,GACAC;QACA;UACAC;UACA;QACA;QACA;MACA,GACAC;QACAd;UACAC;UACAC;UACAC;QACA;MACA;IACA;IACAY;MACA;IACA;IACAC;MACA,WACAC,kDACAC;QACA;QACA;UACAlB;YACAC;YACAC;YACAC;UACA;QACA;MACA,GACAgB;QACAnB;UACAC;UACAC;UACAC;QACA;QACA;MACA;IACA;IAEAiB,iBAEA;EACA;AACA","names":["mixins","components","ChatInput","ChatConfiguration","ChatUsers","ChatMessages","data","validConnection","socket","stompClient","chatMessages","chatUsers","notConnectedDialog","roomCfg","hasPassword","full","joinDto","nickname","password","rules","name","v","created","EventBus","color","type","msg","dayjs","methods","connectsWS","sessionId","senderId","token","senderNickname","lobby","frame","console","error","roomMatch","existsRoom","get","then","catch","handleRoomCfg"],"sourceRoot":"src/views","sources":["ChatView.vue"],"sourcesContent":["<template>\n  <div class=\"overflow-hidden\">\n    <v-row>\n      <v-col cols=\"2\">\n        <ChatUsers></ChatUsers>\n      </v-col>\n      <v-divider vertical></v-divider>\n      <v-col cols=\"8\">\n        <v-container>\n          <ChatMessages></ChatMessages>\n        </v-container>\n        <v-container>\n          <ChatInput></ChatInput>\n        </v-container>\n      </v-col>\n      <v-divider vertical></v-divider>\n      <v-col cols=\"2\">\n        <ChatConfiguration></ChatConfiguration>\n      </v-col>\n    </v-row>\n    <!--DIALOG-->\n    <template>\n      <v-row justify=\"center\">\n        <v-dialog\n            v-model=\"notConnectedDialog\"\n            persistent\n            max-width=\"30vw\"\n        >\n          <v-card>\n            <v-card-title class=\"text-h5\" v-if=\"!roomCfg.full\">\n              <v-icon class=\"mr-3\" large>mdi-chat-question-outline</v-icon>\n              Do you want to join this chat room?\n            </v-card-title>\n            <v-card-title class=\"text-h5\" v-else>\n              <v-icon class=\"mr-3\" large>mdi-emoticon-sad-outline</v-icon>\n              We are sorry but the room is full, try again later\n            </v-card-title>\n            <v-row v-if=\"!roomCfg.full\" class=\"ma-4\">\n              <v-col>\n                <v-text-field\n                    prepend-inner-icon=\"mdi-account\"\n                    v-model=\"joinDto.nickname\"\n                    :rules=\"rules.name\"\n                    label=\"Your nickname\"\n                    required\n                    filled\n                ></v-text-field>\n              </v-col>\n              <v-col v-if=\"roomCfg.hasPassword\">\n                <v-text-field\n                    prepend-inner-icon=\"mdi-lock\"\n                    v-model=\"joinDto.password\"\n                    :rules=\"rules.password\"\n                    label=\"Room password\"\n                    required\n                    filled\n                ></v-text-field>\n              </v-col>\n            </v-row>\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn\n                  color=\"green darken-1\"\n                  text\n                  @click=\"$router.push(`/`);\"\n              >\n                Exit\n              </v-btn>\n              <v-btn\n                  color=\"green darken-1\"\n                  text\n                  @click=\"notConnectedDialog = false\"\n                  v-if=\"!roomCfg.full\"\n              >\n                Join\n              </v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n      </v-row>\n    </template>\n  </div>\n</template>\n<style>\n* {\n  overflow: hidden !important;\n}\n</style>\n<script>\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"webstomp-client\";\nimport { mixins } from \"@/mixins\";\nimport { EventBus } from \"@/main\";\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport ChatUsers from \"@/components/chat/ChatUsers.vue\";\nimport ChatMessages from \"@/components/chat/ChatMessages.vue\";\nimport ChatConfiguration from \"@/components/chat/ChatConfiguration.vue\";\nimport ChatInput from \"@/components/chat/ChatInput.vue\";\nexport default {\n  mixins: [mixins],\n  components: {\n    ChatInput,\n    ChatConfiguration,\n    ChatUsers,\n    ChatMessages\n\n  },\n  data: () => ({\n    validConnection: true,\n    socket: null,\n    stompClient: null,\n    chatMessages: [],\n    chatUsers: [],\n    notConnectedDialog: false,\n    roomCfg: {\n      hasPassword: false,\n      full: false\n    },\n    joinDto: {\n      nickname: '',\n      password: ''\n    },\n    rules: {\n      name: [\n        v => !!v || 'Nickname is required',\n        v => !(v && v.length > 14) || 'Nickname must be less than 14 characters',\n        v => !(v && v.length < 4) || 'Nickname must be at least 4 characters',\n      ],\n      password: [\n          v => !!v || 'Password is requited'\n      ]\n    },\n  }),\n  created() {\n    this.existsRoom();\n\n    if (this.isSessionSetted() && !this.roomMatch()) {\n      this.validConnection = false;\n      EventBus.$emit('showAlert', {\n        color: \"error\",\n        type: \"error\",\n        msg: `You cannot access this chat room.`\n      });\n      this.$router.push(`/404`);\n    }\n\n    if (!this.isSessionSetted()){\n      this.validConnection = false;\n      this.notConnectedDialog = true;\n    }\n    //this.myId = this.getUserId(); <-- En principio no se usa, borrar si veo que no afecta a nada\n    dayjs.extend(relativeTime);\n\n    if (this.validConnection) this.connectsWS();\n  },\n  methods: {\n    connectsWS(){\n      this.socket = new SockJS('http://localhost:8080/websocket', null, {\n        sessionId: () => {\n          return this.getChatId() + \":\" + this.getUserId() + \":\" + this.getNickname() + \":\" + Math.floor(Math.random() * 99999);\n        }\n      });\n      this.stompClient = Stomp.over(this.socket);\n      //this.stompClient.debug = () => { };\n      this.stompClient.connect({\n            senderId: this.getUserId(),\n            token: this.token,\n            senderNickname: this.getNickname(),\n            lobby: this.getChatId(),\n          },\n          frame => {\n            this.stompClient.subscribe(`/topic/messages/${this.getChatId()}`, tick => {\n              console.log(JSON.parse(tick.body))\n              //this.filterLobbyInteraction(JSON.parse(tick.body));\n            });\n            //EventBus.$emit('reloadPlayersInLobby');\n          },\n          error => {\n            EventBus.$emit('showAlert', {\n              color: \"error\",\n              type: \"error\",\n              msg: \"Error connecting to the chat socket\"\n            });\n          });\n    },\n    roomMatch() {\n      return (this.$route.params.roomId.toUpperCase() === this.getChatId().toUpperCase());\n    },\n    existsRoom(){\n      this.axios\n        .get(`/v1/cfg/check/${this.$route.params.roomId}`)\n        .then((res) => {\n          this.roomCfg = res.data;\n          if (this.roomCfg.full){\n            EventBus.$emit('showAlert', {\n              color: \"info\",\n              type: \"info\",\n              msg: `The room is full, try again later`\n            });\n          }\n        })\n        .catch((e) => {\n          EventBus.$emit('showAlert', {\n            color: \"error\",\n            type: \"error\",\n            msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n          });\n          this.$router.push(`/404`);\n        });\n    },\n\n    handleRoomCfg(){\n\n    }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}