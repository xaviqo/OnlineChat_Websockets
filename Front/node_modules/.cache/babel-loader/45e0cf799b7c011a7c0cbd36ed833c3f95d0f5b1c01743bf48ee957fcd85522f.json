{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"webstomp-client\";\nimport { mixins } from \"@/mixins\";\nimport { EventBus } from \"@/main\";\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport ChatUsers from \"@/components/chat/ChatUsers.vue\";\nimport ChatMessages from \"@/components/chat/ChatMessages.vue\";\nimport ChatConfiguration from \"@/components/chat/ChatConfiguration.vue\";\nimport ChatInput from \"@/components/chat/ChatInput.vue\";\nexport default {\n  mixins: [mixins],\n  components: {\n    ChatInput,\n    ChatConfiguration,\n    ChatUsers,\n    ChatMessages\n  },\n  data: () => ({\n    validConnection: true,\n    socket: null,\n    stompClient: null,\n    chatMessages: [],\n    chatUsers: [],\n    notConnectedDialog: false,\n    roomCfg: {\n      hasPassword: false,\n      full: false\n    },\n    rules: {\n      name: [v => !!v || 'Nickname is required', v => !(v && v.length > 14) || 'Nickname must be less than 14 characters', v => !(v && v.length < 4) || 'Nickname must be at least 4 characters'],\n      password: [v => !!v || 'Password is requited']\n    },\n    avatarStyles: []\n  }),\n  created() {\n    this.existsRoom();\n    if (this.isSessionSetted()) {\n      //si est치 inscrito checkear si est치 en la sala y tomar accion\n      this.isUserInscribed();\n    } else {}\n\n    //if (!this.isSessionSetted()) this.loadNotRegisteredUserData();\n\n    EventBus.$on('chatInput_chatView_sendMessage', msg => {\n      this.sendMessage(msg);\n    });\n    dayjs.extend(relativeTime);\n    if (this.validConnection) this.connectsWS();\n  },\n  methods: {\n    connectsWS() {\n      this.socket = new SockJS('http://localhost:8080/websocket', null, {\n        sessionId: () => {\n          return this.$route.params.roomId + \":\" + this.getUserId() + \":\" + this.getNickname() + \":\" + Math.floor(Math.random() * 99999);\n        }\n      });\n      this.stompClient = Stomp.over(this.socket);\n      //this.stompClient.debug = () => { };\n      this.stompClient.connect({\n        senderId: this.getUserId(),\n        token: this.getAccessToken(),\n        senderName: this.getNickname(),\n        roomId: this.$route.params.roomId\n      }, frame => {\n        this.stompClient.subscribe(`/topic/messages/${this.$route.params.roomId}`, tick => {\n          console.log(JSON.parse(tick.body));\n        });\n      }, error => {\n        EventBus.$emit('showAlert', {\n          color: \"error\",\n          type: \"error\",\n          msg: \"Error connecting to the chat socket\"\n        });\n      });\n    },\n    sendMessage(message) {\n      //TODO: https://stomp-js.github.io/stomp-websocket/codo/class/Client.html#send-dynamic\n      // MIRAR LO DEL BODY\n      this.stompClient.send(`/ws/chat/${this.$route.params.roomId}`, JSON.stringify({\n        senderId: this.getUserId(),\n        senderName: this.getNickname(),\n        message: message\n      }), \"\");\n    },\n    existsRoom() {\n      this.axios.get(`/v1/check/room-status/${this.$route.params.roomId}`).then(res => {\n        this.roomCfg = res.data;\n        if (this.roomCfg.full) {\n          EventBus.$emit('showAlert', {\n            color: \"info\",\n            type: \"info\",\n            msg: `The room is full, try again later`\n          });\n        }\n      }).catch(e => {\n        EventBus.$emit('showAlert', {\n          color: \"error\",\n          type: \"error\",\n          msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n        });\n        this.$router.push(`/404`);\n      });\n    },\n    isUserInscribed() {\n      this.axios.get(`/v1/check/user-inscribed/${this.$route.params.roomId}`).then(res => {\n        this.validConnection = true;\n      }).catch(e => {\n        EventBus.$emit('showAlert', {\n          color: \"error\",\n          type: \"error\",\n          msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n        });\n        this.validConnection = false;\n        this.loadNotRegisteredUserData();\n      });\n    },\n    joinRoom() {\n      this.axios.post(`/v1/room/join`, this.joinDto).then(res => {\n        console.log(res.data);\n        this.validConnection = true;\n        this.notConnectedDialog = false;\n      }).catch(e => {\n        EventBus.$emit('showAlert', {\n          color: \"error\",\n          type: \"error\",\n          msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n        });\n      });\n    },\n    getAvatarStyles() {\n      this.axios.get(`/v1/cfg/avatar-styles`).then(res => {\n        this.avatarStyles = res.data;\n        this.newAvatarStyle('');\n      });\n    },\n    newAvatarStyle(actualStyle) {\n      const totalStyles = this.avatarStyles.length;\n      const newStyle = this.avatarStyles[Math.floor(totalStyles * Math.random())];\n      if (newStyle === actualStyle) this.newAvatarStyle(actualStyle);else this.joinDto.avatarUrl = newStyle;\n    },\n    loadNotRegisteredUserData() {\n      this.getAvatarStyles();\n      this.validConnection = false;\n      this.notConnectedDialog = true;\n      this.joinDto.chatRoomId = this.$route.params.roomId;\n    }\n  }\n};","map":{"version":3,"mappings":";AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAA;EACAC;IACAC;IACAC;IACAC;IACAC;EAEA;EACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;MACAC;MACAC;IACA;IACAC;MACAC,OACAC,oCACAA,0EACAA,sEACA;MACAC,WACAD;IAEA;IACAE;EACA;EACAC;IACA;IAGA;MACA;MACA;IACA,QAEA;;IAEA;;IAEAC;MACA;IACA;IAEAC;IACA;EACA;EACAC;IACAC;MACA;QACAC;UACA;QACA;MACA;MACA;MACA;MACA;QACAC;QACAC;QACAC;QACAC;MACA,GACAC;QACA;UACAC;QACA;MACA,GACAC;QACAX;UACAY;UACAC;UACAC;QACA;MACA;IACA;IACAC;MACA;MACA;MACA,+DACAC;QACAX;QACAE;QACAU;MACA;IACA;IACAC;MACA,WACAC,0DACAC;QACA;QACA;UACApB;YACAY;YACAC;YACAC;UACA;QACA;MACA,GACAO;QACArB;UACAY;UACAC;UACAC;QACA;QACA;MACA;IACA;IACAQ;MACA,WACAH,6DACAC;QACA;MACA,GACAC;QACArB;UACAY;UACAC;UACAC;QACA;QACA;QACA;MACA;IACA;IACAS;MACA,WACAC,oCACAJ;QACAV;QACA;QACA;MACA,GACAW;QACArB;UACAY;UACAC;UACAC;QACA;MACA;IACA;IACAW;MACA,WACAN,6BACAC;QACA;QACA;MACA;IACA;IACAM;MACA;MACA;MACA,oEACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;EACA;AACA","names":["mixins","components","ChatInput","ChatConfiguration","ChatUsers","ChatMessages","data","validConnection","socket","stompClient","chatMessages","chatUsers","notConnectedDialog","roomCfg","hasPassword","full","rules","name","v","password","avatarStyles","created","EventBus","dayjs","methods","connectsWS","sessionId","senderId","token","senderName","roomId","frame","console","error","color","type","msg","sendMessage","JSON","message","existsRoom","get","then","catch","isUserInscribed","joinRoom","post","getAvatarStyles","newAvatarStyle","loadNotRegisteredUserData"],"sourceRoot":"src/views","sources":["ChatView.vue"],"sourcesContent":["<template>\n  <div class=\"overflow-hidden\">\n    <v-row>\n      <v-col cols=\"2\">\n        <ChatUsers></ChatUsers>\n      </v-col>\n      <v-divider vertical></v-divider>\n      <v-col cols=\"8\">\n        <v-container>\n          <ChatMessages></ChatMessages>\n        </v-container>\n        <v-container>\n          <ChatInput></ChatInput>\n        </v-container>\n      </v-col>\n      <v-divider vertical></v-divider>\n      <v-col cols=\"2\">\n        <ChatConfiguration></ChatConfiguration>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n<style>\n* {\n  overflow: hidden !important;\n}\n</style>\n<script>\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"webstomp-client\";\nimport { mixins } from \"@/mixins\";\nimport { EventBus } from \"@/main\";\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport ChatUsers from \"@/components/chat/ChatUsers.vue\";\nimport ChatMessages from \"@/components/chat/ChatMessages.vue\";\nimport ChatConfiguration from \"@/components/chat/ChatConfiguration.vue\";\nimport ChatInput from \"@/components/chat/ChatInput.vue\";\nexport default {\n  mixins: [mixins],\n  components: {\n    ChatInput,\n    ChatConfiguration,\n    ChatUsers,\n    ChatMessages\n\n  },\n  data: () => ({\n    validConnection: true,\n    socket: null,\n    stompClient: null,\n    chatMessages: [],\n    chatUsers: [],\n    notConnectedDialog: false,\n    roomCfg: {\n      hasPassword: false,\n      full: false\n    },\n    rules: {\n      name: [\n        v => !!v || 'Nickname is required',\n        v => !(v && v.length > 14) || 'Nickname must be less than 14 characters',\n        v => !(v && v.length < 4) || 'Nickname must be at least 4 characters',\n      ],\n      password: [\n          v => !!v || 'Password is requited'\n      ]\n    },\n    avatarStyles: []\n  }),\n  created() {\n    this.existsRoom();\n\n\n    if (this.isSessionSetted()){\n      //si est치 inscrito checkear si est치 en la sala y tomar accion\n      this.isUserInscribed();\n    } else {\n\n    }\n\n    //if (!this.isSessionSetted()) this.loadNotRegisteredUserData();\n\n    EventBus.$on('chatInput_chatView_sendMessage', msg => {\n      this.sendMessage(msg)\n    });\n\n    dayjs.extend(relativeTime);\n    if (this.validConnection) this.connectsWS();\n  },\n  methods: {\n    connectsWS(){\n      this.socket = new SockJS('http://localhost:8080/websocket', null, {\n        sessionId: () => {\n          return this.$route.params.roomId + \":\" + this.getUserId() + \":\" + this.getNickname() + \":\" + Math.floor(Math.random() * 99999);\n        }\n      });\n      this.stompClient = Stomp.over(this.socket);\n      //this.stompClient.debug = () => { };\n      this.stompClient.connect({\n            senderId: this.getUserId(),\n            token: this.getAccessToken(),\n            senderName: this.getNickname(),\n            roomId: this.$route.params.roomId,\n          },\n          frame => {\n            this.stompClient.subscribe(`/topic/messages/${this.$route.params.roomId}`, tick => {\n              console.log(JSON.parse(tick.body))\n            });\n          },\n          error => {\n            EventBus.$emit('showAlert', {\n              color: \"error\",\n              type: \"error\",\n              msg: \"Error connecting to the chat socket\"\n            });\n          });\n    },\n    sendMessage(message){\n      //TODO: https://stomp-js.github.io/stomp-websocket/codo/class/Client.html#send-dynamic\n      // MIRAR LO DEL BODY\n      this.stompClient.send(`/ws/chat/${this.$route.params.roomId}`,\n          JSON.stringify({\n            senderId: this.getUserId(),\n            senderName: this.getNickname(),\n            message: message\n          }),\"\");\n    },\n    existsRoom(){\n      this.axios\n        .get(`/v1/check/room-status/${this.$route.params.roomId}`)\n        .then((res) => {\n          this.roomCfg = res.data;\n          if (this.roomCfg.full){\n            EventBus.$emit('showAlert', {\n              color: \"info\",\n              type: \"info\",\n              msg: `The room is full, try again later`\n            });\n          }\n        })\n        .catch((e) => {\n          EventBus.$emit('showAlert', {\n            color: \"error\",\n            type: \"error\",\n            msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n          });\n          this.$router.push(`/404`);\n        });\n    },\n    isUserInscribed(){\n      this.axios\n          .get(`/v1/check/user-inscribed/${this.$route.params.roomId}`)\n          .then((res) => {\n            this.validConnection = true;\n          })\n          .catch((e) => {\n            EventBus.$emit('showAlert', {\n              color: \"error\",\n              type: \"error\",\n              msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n            });\n            this.validConnection = false;\n            this.loadNotRegisteredUserData();\n          });\n    },\n    joinRoom(){\n      this.axios\n          .post(`/v1/room/join`,this.joinDto)\n          .then((res) => {\n            console.log(res.data);\n            this.validConnection = true;\n            this.notConnectedDialog = false;\n          })\n          .catch((e) => {\n            EventBus.$emit('showAlert', {\n              color: \"error\",\n              type: \"error\",\n              msg: `Error ${e.response.data.code}. ${e.response.data.message}`\n            });\n          });\n    },\n    getAvatarStyles(){\n      this.axios\n          .get(`/v1/cfg/avatar-styles`)\n          .then((res) => {\n            this.avatarStyles = res.data;\n            this.newAvatarStyle('');\n          });\n    },\n    newAvatarStyle(actualStyle){\n      const totalStyles = this.avatarStyles.length;\n      const newStyle = this.avatarStyles[Math.floor(totalStyles * Math.random())];\n      if (newStyle === actualStyle) this.newAvatarStyle(actualStyle);\n      else this.joinDto.avatarUrl = newStyle;\n    },\n    loadNotRegisteredUserData(){\n      this.getAvatarStyles();\n      this.validConnection = false;\n      this.notConnectedDialog = true;\n      this.joinDto.chatRoomId = this.$route.params.roomId;\n    }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}